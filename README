Test task as a web application.

First of all, please take a look at the practical implementation that is currently available at http://test2712.in.ua/
This is exactly what I sent - already deployed online and available for "visual" inspection.

Code is sent as an attachment and also is available at https://github.com/semaster/test2712
In the root folder is the database dump of the test data for DB 
(easy create a page using the example of the implementation of this application.)
When testing the use 'mytoken' value for authentication.

In order to run it on the server side PHP require> = 5.6, MySQL> = 5.1, 
the presence of PDO driver in the system, as well as the CURL module

Depending on your system configuration and used stack - you need to ensure that the URL-path  
available in the QUERY_STRING parameter - it must for "routing"


In my case, it was used nginx as a frontend - enough to make as follows:
    location / {
        try_files $uri /index.php?$request_uri;
        index  index.html index.php;
    }
If you use .htaccess - I have included those file

The directory structure is as follows:

/assets
    /css
    /fonts
    /img
/engine
    /autoload
        /Controller
        /Model
        /View
    /template

Single entry point is the index.php file located in the root directory.
There are a connection configuration files and the autoloader in /engine folder.
In this example, I have implemented the most simple version of the autoloader to demonstrate how that feature works.
The file /engine/config.php you will need to set the parameters to connect to your database.

In the index.php file we also define Router.
In our case (for the needs of the test task) was set three paths:
  - Actually a point to access the REST API
  - A point to showcase of this api (using a POST request (via CURL) and using AJAX)
  - A point to demonstrating of two SQL queries (as described in the job)

The overall structure is sustained in the MVC architectural style - the ideas were borrowed
from various frameworks.
Each class contains a minimal set of code, so most of the code (I think) shouldbe intuitive. 
Nevertheless, I tried to give in each file at least a brief description.

In demonstrations views is used .js in file /engine/template/ExampleView.php

In order to run correctly AJAX - you need to change in line 7 of this file the value of data-create-url. 
This could be done through window.location but I used this implementation 
for case when  api point and test page are in different locations.


SQL statements described in item 3 of the task can be found in the class sqlModel
     /engine/Model/sqlModel.php

here it is plain:
 - SELECT SUM(amount) AS sum FROM transactions 
            WHERE  email=? AND YEAR(create_date) = YEAR(NOW()) AND MONTH(create_date) = MONTH(NOW())  AND status='approved'
            GROUP BY email
- SELECT date_format(create_date, '%W' ) AS weekday, sum(amount) AS revenue 
            FROM transactions WHERE email=? AND status='approved'
            GROUP BY WEEKDAY(create_date)

I used PDO driver and prepared statements for the secure input parameter email

Thank you and I will be happy for fidbek.






