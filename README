Тестовое задание выполнено в виде веб-приложения. 

Прежде всего предлагаю посмотреть практическую реализацию которая на данный момент доступна по адресу http://test2712.in.ua/
Это ровно то что я выслал - уже размещенное в сети и доступное для "визуальной" проверки.
Код высылаю во вложении а также он будет доступен по адресу https://github.com/semaster/test2712
Также в корневой папке находится дамп базы данных с тестовыми данными.(только в архиве, на гитхабе нет) - но их легко будет 
создать просто используя страницу примера реализации в этом приложении.
При тестировании АПИ используйте значение mytoken для авторизации.


Для его запуска на стороне сервера потребуется PHP >= 5.6, MySQL >= 5.1, наличие PDO драйвера в системе, а также модулей CURL
В зависимости от конфигурации вашей системы и используемого стека - вам необходимо обеспечить чтобы URL-путь 
был доступен в параметре QUERY_STRING - именно по нему в дальнейшем работает "роутинг"

В моем случае использовался nginx как фронтенд - достаточно чтобы корневой "локейшн" выглядел следующим образом:
    location / {
        try_files $uri /index.php?$request_uri;
        index  index.html index.php;
    }
В случае использования .htaccess он может выглядеть так:
    RewriteEngine On
    Options +FollowSymlinks
    RewriteBase /
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^ /index.php?%{REQUEST_URI} [L,QSA]

Структура каталогов следующая:

/assets
    /css
    /fonts
    /img
/engine
    /autoload
        /Controller
        /Model
        /View
    /template

Единой точкой входа является файл index.php размещенный в корневой директории.
В нем происходит подключение файлов с настройками и автозагрузчика.
В этом примере я реализовал наиболее простой вариант автозагрузчика для демонстрации ознакомленности и с этой функцией.
В файле /engine/config.php вам необходимо будет задать параметры для подключения к вашей базе данных

В файле index.php также создается обьект Router и задаются как должны обрабытываться требуемы нам пути.
В нашем случае (для нужд тестового задания) было задано три пути:
 - собственно путь для доступа к REST API
 - путь для демонстрации работы этого апи используя POST запрос (через CURL) и используя AJAX
 - путь для демонстрации работы двух SQL запросо (описанных в задании)

 Общая структура выдержана в архитектурном стиле MVC - этот вариант я написал сам - идеи были позаимствованы
 из различных фрейворков.

 Каждый класс содержит минимальный набор кода, поэтому большинство кода (как мне кажется) должно
 быть интуитивно понятно. Тем не менее я постарался в каждом файле привести хотя бы краткое описание

В примере реализации использования этого апи используется подключение js в файле 
/engine/template/ExampleView.php
Для того чтобы на вашем сервере корректно отрабатывал AJAX - вам необходимо изменить
в 7 строке этого файла значение data-create-url. Это можно было сделать и через window.location однако 
остановился именно на такой реализации на случай если апи и тест разместить по разным адресам

 SQL запросы описанные в п.3 задания можно найти в классе sqlModel
     /engine/Model/sqlModel.php
 но также дублирую их тут:
 - SELECT SUM(amount) AS sum FROM transactions 
            WHERE  email=? AND YEAR(create_date) = YEAR(NOW()) AND MONTH(create_date) = MONTH(NOW()) 
            GROUP BY email
- SELECT date_format(create_date, '%W' ) AS weekday, sum(amount) AS revenue 
            FROM transactions WHERE email=? AND status='approved'
            GROUP BY WEEKDAY(create_date)

я использовал драйвер PDO и соответственно подготовленные выражения для безопасной передачи параметра email

Вот пожалуй и все. 
Спасибо и буду рад за фидбек.






